// <auto-generated />
using System;
using CarnetSanitaire.Web.UI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarnetSanitaire.Web.UI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200420154823_nouvelle migration")]
    partial class nouvellemigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EtablissementId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Matricule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EtablissementId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.Coordonnee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubAdresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coordonnees");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.Domaine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Domaines");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.Etablissement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacite")
                        .HasColumnType("int");

                    b.Property<int>("CoordonneeId")
                        .HasColumnType("int");

                    b.Property<int?>("InstallationId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CoordonneeId");

                    b.HasIndex("InstallationId");

                    b.ToTable("Etablissements");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.Installation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CalorifugeageEcs")
                        .HasColumnType("int");

                    b.Property<int>("CalorifugeageEf")
                        .HasColumnType("int");

                    b.Property<DateTime>("Diagnostique_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Diagnostique_Intervenant")
                        .HasColumnType("int");

                    b.Property<bool>("Diagnostique_Realise")
                        .HasColumnType("bit");

                    b.Property<bool>("DispositifProtectionRetourEau")
                        .HasColumnType("bit");

                    b.Property<string>("InterconnexionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Interconnexion_Existance")
                        .HasColumnType("bit");

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.Property<int>("TypeReseauEcs")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.ToTable("Installations");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.Intervention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateIntervention")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EtablissementId")
                        .HasColumnType("int");

                    b.Property<int>("Intervenant")
                        .HasColumnType("int");

                    b.Property<string>("Lieu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeInterventionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EtablissementId");

                    b.HasIndex("TypeInterventionId");

                    b.ToTable("Interventions");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.LogErreur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateErreur")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageErreur")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogErreurs");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.Materiau", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InstallationId")
                        .HasColumnType("int");

                    b.Property<int>("Nom")
                        .HasColumnType("int");

                    b.Property<bool>("Statut")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("InstallationId");

                    b.ToTable("Materiaus");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.Personnel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SocieteId")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SocieteId");

                    b.ToTable("Personnels");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NombreBallon")
                        .HasColumnType("int");

                    b.Property<decimal>("TemperatureBouclageEcs")
                        .HasColumnType("decimal(18,1)");

                    b.Property<decimal>("TemperatureDepartEcs")
                        .HasColumnType("decimal(18,1)");

                    b.Property<int?>("TypeProductionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeProductionId");

                    b.ToTable("Productions");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.ProduitTraitement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProduitTraitements");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.Societe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CoordonneeId")
                        .HasColumnType("int");

                    b.Property<int>("EtablissementId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoordonneeId");

                    b.HasIndex("EtablissementId");

                    b.ToTable("Societes");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.SocieteDomaine", b =>
                {
                    b.Property<int>("DomaineId")
                        .HasColumnType("int");

                    b.Property<int>("SocieteId")
                        .HasColumnType("int");

                    b.HasKey("DomaineId", "SocieteId");

                    b.HasIndex("SocieteId");

                    b.ToTable("SocieteDomaines");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.Traitement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Dosage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("InstallationId")
                        .HasColumnType("int");

                    b.Property<int?>("ProduitTraitementId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeTraitementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstallationId");

                    b.HasIndex("ProduitTraitementId");

                    b.HasIndex("TypeTraitementId");

                    b.ToTable("Traitements");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.Travail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTravaux")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonnelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonnelId");

                    b.ToTable("Travails");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.TypeIntervention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeInterventions");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.TypeProduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeProductions");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.TypeTraitement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeTraitements");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.ApplicationRoleClaim", b =>
                {
                    b.HasOne("CarnetSanitaire.Web.UI.Models.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.ApplicationUser", b =>
                {
                    b.HasOne("CarnetSanitaire.Web.UI.Models.Etablissement", "Etablissement")
                        .WithMany()
                        .HasForeignKey("EtablissementId");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.ApplicationUserClaim", b =>
                {
                    b.HasOne("CarnetSanitaire.Web.UI.Models.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.ApplicationUserLogin", b =>
                {
                    b.HasOne("CarnetSanitaire.Web.UI.Models.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("CarnetSanitaire.Web.UI.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarnetSanitaire.Web.UI.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.ApplicationUserToken", b =>
                {
                    b.HasOne("CarnetSanitaire.Web.UI.Models.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.Etablissement", b =>
                {
                    b.HasOne("CarnetSanitaire.Web.UI.Models.Coordonnee", "Coordonnee")
                        .WithMany()
                        .HasForeignKey("CoordonneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarnetSanitaire.Web.UI.Models.Installation", "Installation")
                        .WithMany()
                        .HasForeignKey("InstallationId");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.Installation", b =>
                {
                    b.HasOne("CarnetSanitaire.Web.UI.Models.Production", "Production")
                        .WithMany()
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.Intervention", b =>
                {
                    b.HasOne("CarnetSanitaire.Web.UI.Models.Etablissement", "Etablissement")
                        .WithMany("Interventions")
                        .HasForeignKey("EtablissementId");

                    b.HasOne("CarnetSanitaire.Web.UI.Models.TypeIntervention", "TypeIntervention")
                        .WithMany()
                        .HasForeignKey("TypeInterventionId");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.Materiau", b =>
                {
                    b.HasOne("CarnetSanitaire.Web.UI.Models.Installation", null)
                        .WithMany("Materiaux")
                        .HasForeignKey("InstallationId");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.Personnel", b =>
                {
                    b.HasOne("CarnetSanitaire.Web.UI.Models.Societe", "Societe")
                        .WithMany("Personnels")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.Production", b =>
                {
                    b.HasOne("CarnetSanitaire.Web.UI.Models.TypeProduction", "TypeProduction")
                        .WithMany()
                        .HasForeignKey("TypeProductionId");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.Societe", b =>
                {
                    b.HasOne("CarnetSanitaire.Web.UI.Models.Coordonnee", "Coordonnee")
                        .WithMany()
                        .HasForeignKey("CoordonneeId");

                    b.HasOne("CarnetSanitaire.Web.UI.Models.Etablissement", "Etablissement")
                        .WithMany("Societes")
                        .HasForeignKey("EtablissementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.SocieteDomaine", b =>
                {
                    b.HasOne("CarnetSanitaire.Web.UI.Models.Domaine", "Domaine")
                        .WithMany("SocieteDomaines")
                        .HasForeignKey("DomaineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarnetSanitaire.Web.UI.Models.Societe", "Societe")
                        .WithMany("SocieteDomaines")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.Traitement", b =>
                {
                    b.HasOne("CarnetSanitaire.Web.UI.Models.Installation", null)
                        .WithMany("Traitements")
                        .HasForeignKey("InstallationId");

                    b.HasOne("CarnetSanitaire.Web.UI.Models.ProduitTraitement", "ProduitTraitement")
                        .WithMany()
                        .HasForeignKey("ProduitTraitementId");

                    b.HasOne("CarnetSanitaire.Web.UI.Models.TypeTraitement", "TypeTraitement")
                        .WithMany()
                        .HasForeignKey("TypeTraitementId");
                });

            modelBuilder.Entity("CarnetSanitaire.Web.UI.Models.Travail", b =>
                {
                    b.HasOne("CarnetSanitaire.Web.UI.Models.Personnel", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
